1. Cara kirim hasil coding dari komputer lokal ke github
---> git add .
---> git commit -m "pesan anda"
---> git push -u namaremote namabranch-tujuan
---> masukin username github
---> masukin personal token
---> git config --global credential.helper cache

++ pastikan saat push sesuatu, selalu sertakan -u namaremote namabranch-tujuan. Jangan git push saja,
   alasannya adalah, karena akan membuat bingung jika terdapat banyak remote dan branch yang berbeda pada satu repo yang terhubung ++

2. Cara cek progress repo yang di Github
---> git fetch
---> git status

3. Menghubungkan repo lokal ke remote (Github, Gitlab atau Bitbucket) (biasanya untuk repository baru yang masih kosong, bahkan readme.md tidak ada)
---> pergi atau masuk ke repo di komputer lokal
---> git remote add origin https://github.com/lifetimerdp/lifetimerdp.github.io.git
---> git branch -M main
---> git push -u origin main

ket:
  -M artinya branch baru
  -u artinya ke mana (git push -u artinya mau push ke mana?)
  origin adalah nama remotenya (cek remote -> git remote -v)
  main adalah tujuan branchnya

# Cek remote yang sudah terhubung
---> git remote

# Beda repository beda juga remotenya
---> git remote -v
---> git remote remove origin
---> git remote add origin https://github.com/lifetimerdp/lifetimerdp.github.io.git
---> git branch -M main
---> git push -u origin main

ket:
  origin adalah penamaan default dari remote (sesuaikan jika anda menamai dengan nama lain)

4. Menghubungkan repo lokal ke dua remote yang berbeda (biasanya dari remote akun dan repo kita sendiri, dan repo orang lain yang kita lakukan fork.
   Tujuannya adalah, agar kita tau apa saja perubahan yang terjadi pada kedua repository dari dua remote tersebut)

# Cek remote yang terhubung secara detail
---> git remote -v

++ Jika melakukan clone (repo github ke lokal), maka otomatis remote akan langsung terhubung (remote 1 sudah terhubung).
Cek menggunakan perintah "git remote" ++

# Hubungkan remote 2
---> git remote add namaremote2 https://link-reponya.git
---> git fetch namaremote2
---> git log --all --decorate --oneline --graph

5. Menyocokkan repo di komputer lokal dengan repo di Github
---> git fetch namaremotenya
Contoh: nama remotenya origin, maka lakukan ---> git fetch origin

---> git merge namaremote/namabranchnya
Contoh: nama remotenya origin dan namabranchnya main ---> git merge origin/main

6. Hapus branch secara tuntas
---> git branch -d namabranchnya
---> git push namaremote-dari-reponya --delete namabranch-yang-mau-dihapus
Contoh: remotenya origin, nama branchnya ajukanfiturbaru ---> git push origin --delete ajukanfiturbaru


7. Gitignore
Gitignore adalah sebuah file khusus yang dibuat di dalam repository, yang digunakan untuk memilih, file apa saja yang
tidak ingin ikut ditambahkan saat kita melakukan "git add ." dan "git commit"

# Contoh isi file .gitignore
  Contoh kasus: Saya tidak ingin file "python-bot.py", folder bernama Akun, dan file dengan ekstensi .exe ikut ditambahkan
                saat melakukan git add .
                
  isi file .gitignore: python-bot.py
                       Akun/
                       *.exe
# Cara otomatis dan rekomendasi file apa saja yang sebaiknya dimasukkan di .gitignore
---> buka https://gitignore.io
---> tulis sistem operasi, framework yang kalian gunakan, dan code editor yang kalian pakai

8. Cara lain untuk menyocokkan isi branch atau cara alternatif selain melakukan merge (Menggunakan Rebase)
Rebase memiliki kelebihan dibandingkan merge, yaitu jika kita melihat histori commit pada repo yang dilakukan rebase. Maka,
jalur dari commit yang terjadi akan selalu Fast Forward (tidak akan terjadi three-way merge (atau jalan cabang tiga)). 
Intinya, menggunakan rebase, branch yang di merge / digabungkan, akan selalu satu jalur commit, keuntungan dari satu jalur commit adalah
tidak akan menghasilkan commit yang baru, saat merge selesai

---> pindah ke branch yang terdapat fitur tambahan atau apapun itu, yang ingin ditambahkan ke branch utama
---> git checkout branch2
---> git rebase master
---> git log --all --decorate --oneline --graph

++ Jika branch utama (master) ketinggalan commitnya, kalian lakukan rebase sekali lagi. Tetapi, dengan tujuan rebase yang berbeda ++
---> Gak perlu checkout lagi, karena sudah berada di branch yang ingin melakukan rebase
---> git rebase branch2

# Lakukan push ke github (jika perlu)
---> git push -u namaremotenya namabranchnya

