1. Perintah mengubah Folder di komputer lokal menjadi Sebuah Repository (otomatis akan membuat sebuah folder baru bernama ".git")
---> git init

# Memahami Alur kerja Git
  Area komputer lokal --> Ruang pengelola atau Repository Git (Umumnya disebut dengan "staging area") --> Area commit (area untuk menyimpan perubahan)


2. Menambahkan file ke repository Git

# menambahkan satu persatu
---> git add [nama file]

# langsung semua file
---> git add .


3. Cara cek perubahan yang terjadi di Ruang pengelola atau Repository Git
---> git status


4. Cara melakukan commit

# Sebelum bisa melakukan commit di komputer lokal, kalian harus mengidentifikasi diri kalian. Tujuannya, agar Git mengetahui siapa yang melakukan commit.
---> git config --global user.name "nama atau username kalian"
---> git config --global user.email "alamatemailmu@gmail.com"

# Lakukan commit
---> git commit -m "tulis catatan untuk file-nya"

ket:
  -m: artinya message atau pesan
  
# Lakukan git add & git commit secara bersamaan khusus untuk file yang sudah pernah dimodifikasi (cara lihat status modifikasi file-nya
  menggunakan perintah git status)
---> git commit -am "tulis catatan untuk filenya"
    
# Melihat histori commit
---> git log

  + melihat beberapa histori commit saja (mulai dari commit paling baru ke commit sebelumnya, dst)
  ---> git log -5
  
  + melihat histori commit dari file tertentu
  ---> git log -- namafilenya
  
  ket:
    -5 adalah 5 commit terakhir (bisa 6, 7, 8, dst)
    -- adalah melihat detail log dari satu file (misalnya, jika file dihapus, diubah, atau lainnya)


5. Melakukan checkout (berpindah)

# Cara mengembalikan satu file yang telah dihapus menggunakan checkout
---> git checkout 13ae2 -- namafilenya
---> git commit -m "mengembalikan file yang dihapus"

ket:
  13ae2 adalah diambil dari kode hash dari filenya (5 kode unik pertama saja)
  -- adalah untuk menargetkan file yang ingin dikembalikan

# Cara checkout (berpindah) ke branch lainnya
---> git checkout namabranchnya


6. Branch

# Melihat semua branch yang tersedia (warna hijau dan ada bintangnya, adalah branch yang sedang digunakan)
---> git branch

# Membuat branch baru
---> git branch namabranchnya

# Cara melihat semua branch dalam bentuk visual (ada jalurnya, dll)
---> git log --all --decorate --oneline --graph

# Menghapus branch (harus merge dulu)
---> git branch -d namabranchnya

ket:
  -d artinya delete atau menghapus

# Menghapus branch tanpa harus merge
---> git branch -D namabranchnya


7. Merge

Terdapat dua tipe Merge:
- Fast Forward: ketika menggabungkan branch yang merupakan cabang dari branch master (branch utama / default)
- Three-way Merge: ketika branch utama telah digabungkan dengan branch lainnya, tetapi ingin menggabungkannya lagi dengan branch lainnya sekali lagi.
                   Perintah yang digunakan sama saja dengan fast forward, ini hanya terjadi dibelakang layar (terlihat seperti 3 jalur jika dilihat
                   menggunakan "git log --all --decorate --oneline --graph")

# Cara melakukan merge (sebelum melakukan merge, checkout (pindahkan) ke branch master atau branch utama)
---> git merge namabranchnya

  Bisa juga langsung menambahkan catatan (agar tidak masuk ke editor message nantinya)
  ---> git merge -m namabranchnya
  
  ket:
    -m adalah message atau pesan

# 
